<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <title>Add Job</title>
    <style>
      input {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
        border: solid 1px #ccc;
        outline: none;
        border-radius: 8px;
        height: 47.5px;
      }
      .inputMain {
        flex: 1;
      }
      .generateButton,
      .addButton {
        background-color: #39a2f8;
        border: none;
        outline: none;
        padding: 8px 30px;
        color: white;
        border-radius: 8px;
        border: 1px solid #39a2f8;
      }
      .addButton {
        color: #39a2f8;
        background-color: transparent;
        margin-top: 20px;
      }

      table {
        width: 100%;
        border-radius: 8px;
        border: 1px solid #ccc;
        padding: 15px 30px;
        border-collapse: separate;
      }

      #logo {
        cursor: pointer;
      }
      select.form-select {
    border-radius: 8px;
    padding: 6px 12px;
    height: 40px;
    width: 100px !important;
    display: inline-block;
  }
    </style>
  </head>
  <body>
    <div style="background-image: url('https://img.freepik.com/free-vector/ombre-blue-curve-light-blue-background_53876-173299.jpg'); background-size: cover; height: 100px;">
      <h3 class="p-4">Onboarding Form</h3>
    </div>

    <section class="py-5">
      <div class="container">
        <h4>Company Profile</h4>
        <form class="gap-3" id="jobForm" action="/job" method="POST" enctype="multipart/form-data">
          <div class="d-flex gap-4">
            <div class="inputMain">
              <label>Name</label><br />
              <input type="text" name="companyName" class="border mt-1" />
            </div>
            <div class="inputMain">
              <label>Logo</label><br />
              <input id="logo" type="file" name="logo" class="border mt-1" />
            </div>
          </div>

          <div class="mt-4">
            <h4>Job Details</h4>
            <div id="inputContainer">
              <div class="inputMain">
                <label>Job Title</label><br />
                <input type="text" name="jobRole[]" class="border mt-1" />
              </div>
            </div>
            <button type="button" class="addButton" onclick="addJobInput()">+ Add</button>
          </div>

          <div class="mt-4">
            <div class="d-flex gap-3">
              <div class="inputMain">
                <label>Candidate Name</label><br />
                <input type="text" name="candidateName" class="border mt-1" />
              </div>
              <div class="inputMain">  
                <label>Link</label><br />
                <input type="text" class="border mt-1" disabled />
              </div>
            </div>
            <div class="mt-4">
              <button class="generateButton">Generate Link</button>
            </div>
          </div>
        </form>

        <div class="row justify-content-between mb-3 align-items-center mt-5">
          <!-- Search Input and Button -->
          <div class="col-md-6  d-flex">
            <input
            type="text"
            id="searchInput"
            class="form-control"
            placeholder="Search by candidate name or job title"
            value="<%= data.search || '' %>"
          />
            <button class="btn btn-primary ms-2" id="searchBtn" type="button">Search</button>
          </div>
        
          <!-- Limit Dropdown -->
          <div class="col-md-3 d-flex justify-content-end mt-3 mt-md-0">
            <label for="limitSelect" class="mt-2">Items per page</label>
            <select id="limitSelect" class="form-select w-auto">
              <option value="5" <%= data.limit == 5 ? "selected" : "" %>>5</option>
              <option value="10" <%= data.limit == 10 ? "selected" : "" %>>10</option>
              <option value="25" <%= data.limit == 25 ? "selected" : "" %>>25</option>
              <option value="50" <%= data.limit == 50 ? "selected" : "" %>>50</option>
            </select>
          </div>
        </div>
        
        

        <div id="jobTableSection">
          <table class="mt-4" cellpadding="8" cellspacing="0">
            <thead>
              <tr>
                <th>S.No</th>
                <th>Candidate Name</th>
                <th>Date</th>
                <th>Job Title</th>
                <th>Generated Link</th>
                <th>Candidate Details</th>
              </tr>
            </thead>
            <tbody>
              <% data?.job?.forEach((form, index) => { %>
                <tr>
                  <td><%= index + 1 %></td>
                  <td><%= form.candidateName %></td>
                  <td><%= form.createdAt.toLocaleDateString("en-GB") %></td>
                  <td>
                    <% if (Array.isArray(form.jobRole) && form.jobRole.length > 0) { %>
                      <%= form.jobRole.join(", ") %>
                    <% } else { %>
                      N/A
                    <% } %>
                  </td>
                  <td><a href="/multistep-form/<%= form.link %>" target="_blank">Link</a></td>
                  <td><a href="/candidate-detail/<%= form.link %>">Show Details</a></td>
                </tr>
              <% }); %>
            </tbody>
          </table>

          <div class="pagination mt-4"  id="jobTableSection">
            <ul class="pagination d-flex gap-3 justify-content-center align-items-center">
              <% if (data.page > 1) { %>
                <li class="page-item">
                  <a class="page-link" href="?sort=<%= data.sort %>&page=<%= data.page - 1 %>">Previous</a>
                </li>
              <% } %>

              <% for (let i = 1; i <= data.totalPages; i++) { %>
                <li class="page-item <%= data.page === i ? 'active' : '' %>">
                  <a class="page-link" href="?sort=<%= data.sort %>&page=<%= i %>"><%= i %></a>
                </li>
              <% } %>

              <% if (data.page < data.totalPages) { %>
                <li class="page-item">
                  <a class="page-link" href="?sort=<%= data.sort %>&page=<%= data.page + 1 %>">Next</a>
                </li>
              <% } %>
            </ul>
          </div>
        </div>
      </div>
    </section>
    <script>
      // Add job input field
      function addJobInput() {
        const container = document.getElementById("inputContainer");
        const newInputDiv = document.createElement("div");
        newInputDiv.className = "inputMain";
        newInputDiv.innerHTML = `
          <label>Job Title</label><br/>
          <input type="text" name="jobRole[]" class="border mt-1" />
        `;
        container.appendChild(newInputDiv);
      }
    
      // Handle Form Submit
      document.getElementById("jobForm").addEventListener("submit", async function (e) {
        e.preventDefault();
        const form = document.getElementById("jobForm");
        const formData = new FormData();
    
        formData.append("companyName", form.querySelector('input[name="companyName"]').value);
        formData.append("candidateName", form.querySelector('input[name="candidateName"]').value);
        const logoFile = form.querySelector('input[name="logo"]').files[0];
        if (logoFile) formData.append("logo", logoFile);
    
        form.querySelectorAll('input[name="jobRole[]"]').forEach((input) => {
          formData.append("jobRole", input.value);
        });
    
        try {
          const response = await fetch("/job", {
            method: "POST",
            body: formData,
          });
          const result = await response.json();
          if (result.status) {
            alert("Link generated successfully!");
            form.reset();
            window.location.reload();
          } else {
            alert(result.message || "Failed to generate link.");
          }
        } catch (err) {
          console.error(err);
          alert("Something went wrong.");
        }
      });
    
      // Re-bind pagination and limit dropdown
      function attachPaginationListeners() {
        document.querySelectorAll(".pagination a.page-link").forEach((link) => {
          link.addEventListener("click", handlePaginationClick);
        });
      }
    
      function handlePaginationClick(e) {
        e.preventDefault();
        const url = new URL(this.href);
        const limit = document.getElementById("limitSelect").value;
        const search = document.getElementById("searchInput").value;
        url.searchParams.set("limit", limit);
        url.searchParams.set("search", search);
        loadTable(url);
      }
    
      function loadTable(url) {
        fetch(url)
          .then((res) => res.text())
          .then((html) => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, "text/html");
            const newTableSection = doc.getElementById("jobTableSection");
            if (newTableSection) {
              document.getElementById("jobTableSection").innerHTML = newTableSection.innerHTML;
              attachPaginationListeners();
            }
          })
          .catch((err) => {
            console.error("Pagination error:", err);
            alert("Failed to load page.");
          });
      }
    
      // Limit dropdown listener
      document.getElementById("limitSelect").addEventListener("change", function () {
        const limit = this.value;
        const search = document.getElementById("searchInput").value;
        const url = new URL(window.location.href);
        url.searchParams.set("limit", limit);
        url.searchParams.set("search", search);
        url.searchParams.set("page", 1); // Reset to first page
        loadTable(url);
      });
    
    // Search button listener
    document.getElementById("searchBtn").addEventListener("click", function () {
  const query = document.getElementById("searchInput").value.trim();
  const limit = document.getElementById("limitSelect").value;
  const url = new URL(window.location.href);
  url.searchParams.set("search", query);
  url.searchParams.set("limit", limit);
  url.searchParams.set("page", 1); // Reset to first page
  loadTable(url); // This should reload the filtered results
});

    
      attachPaginationListeners(); // Initial
    </script>
    
    
  </body>
</html>
